name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: financial_app
          POSTGRES_PASSWORD: 12345678
          POSTGRES_DB: financial_app_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run build

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U financial_app; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations
      run: npm run db:migrate
      env:
        NODE_ENV: test
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: financial_app
        TEST_DB_PASSWORD: 12345678
        TEST_DB_NAME: financial_app_test

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        JWT_SECRET: test_jwt_secret_key_for_ci
        JWT_EXPIRES_IN: 3600
        JWT_REFRESH_EXPIRES_IN: 7200
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: financial_app
        TEST_DB_PASSWORD: 12345678
        TEST_DB_NAME: financial_app_test
        CLIENT_URL: http://localhost:3000

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        JWT_SECRET: test_jwt_secret_key_for_ci
        JWT_EXPIRES_IN: 3600
        JWT_REFRESH_EXPIRES_IN: 7200
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: financial_app
        TEST_DB_PASSWORD: 12345678
        TEST_DB_NAME: financial_app_test
        CLIENT_URL: http://localhost:3000

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        JWT_SECRET: test_jwt_secret_key_for_ci
        JWT_EXPIRES_IN: 3600
        JWT_REFRESH_EXPIRES_IN: 7200
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: financial_app
        TEST_DB_PASSWORD: 12345678
        TEST_DB_NAME: financial_app_test
        CLIENT_URL: http://localhost:3000

    - name: Generate test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        JWT_SECRET: test_jwt_secret_key_for_ci
        JWT_EXPIRES_IN: 3600
        JWT_REFRESH_EXPIRES_IN: 7200
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: financial_app
        TEST_DB_PASSWORD: 12345678
        TEST_DB_NAME: financial_app_test
        CLIENT_URL: http://localhost:3000

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level high

    - name: Check for vulnerabilities
      run: |
        npx audit-ci --config audit-ci.json || true